name: Manual Data Migration

on:
  # Actions 탭에서 수동으로 실행할 수 있도록 허용
  workflow_dispatch:

jobs:
  migrate-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 저장소에 파일을 쓰고 커밋할 수 있는 권한

    steps:
      # 1. 저장소 코드를 워크플로우 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # GitHub Actions가 생성한 커밋이 다른 워크플로우를 트리거할 수 있도록 PAT를 사용합니다.
          token: ${{ secrets.GH_PAT }}

      # 2. Node.js 환경을 설정합니다. (스크립트 실행을 위해)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. 마이그레이션 스크립트를 실행합니다.
      - name: Run Migration Script
        id: run-script
        run: |
          node -e '
            const fs = require("fs").promises;
            const path = require("path");

            // --- 설정 ---
            const GITHUB_CONFIG = {
              owner: "garimto81",
              repo: "frame",
              legacyPath: "data/results.json",
              indexPath: "data/index.json",
              chunkDir: "data/results/"
            };
            const CHUNK_SIZE_LIMIT = 800 * 1024; // 800 KB
            // --- 종료 ---

            async function run() {
              console.log("마이그레이션을 시작합니다.");

              // 1. 기존 파일 읽기
              console.log(`1. 기존 파일 '${GITHUBCONFIG.legacyPath}' 확인 중...`);
              let legacyContent;
              try {
                legacyContent = await fs.readFile(GITHUBCONFIG.legacyPath, "utf-8");
              } catch (e) {
                console.log(`'${GITHUBCONFIG.legacyPath}' 파일을 찾을 수 없거나 읽을 수 없습니다. 마이그레이션을 중단합니다.`);
                return;
              }
              console.log("기존 파일 확인 완료.");

              // 2. 데이터 파싱
              console.log("2. 기존 데이터 파싱 중...");
              const dataToMigrate = JSON.parse(legacyContent);
              const dataAsObject = Array.isArray(dataToMigrate) 
                ? dataToMigrate.reduce((acc, item) => { if(item && item.analysisId) acc[item.analysisId] = item; return acc; }, {}) 
                : dataToMigrate;
              console.log(`파싱 완료. 총 ${Object.keys(dataAsObject).length}개 기록 발견.`);

              // 3. 청크 파일로 분할
              console.log("3. 데이터를 청크 파일로 분할합니다...");
              const allEntries = Object.entries(dataAsObject);
              let currentChunk = {};
              let currentChunkSize = 0;
              let chunkIndex = 1;
              const newChunkNames = [];
              
              await fs.mkdir(GITHUBCONFIG.chunkDir, { recursive: true });

              for (const [key, value] of allEntries) {
                  const entryString = JSON.stringify({ [key]: value });
                  if (currentChunkSize + entryString.length > CHUNK_SIZE_LIMIT && Object.keys(currentChunk).length > 0) {
                      const chunkName = `results_${chunkIndex++}.json`;
                      await fs.writeFile(`${GITHUBCONFIG.chunkDir}${chunkName}`, JSON.stringify(currentChunk, null, 2));
                      newChunkNames.push(chunkName);
                      console.log(`  - 청크 ${chunkIndex - 1} 생성 완료.`);
                      currentChunk = {};
                      currentChunkSize = 0;
                  }
                  currentChunk[key] = value;
                  currentChunkSize += entryString.length;
              }

              if (Object.keys(currentChunk).length > 0) {
                   const chunkName = `results_${chunkIndex}.json`;
                   await fs.writeFile(`${GITHUBCONFIG.chunkDir}${chunkName}`, JSON.stringify(currentChunk, null, 2));
                   newChunkNames.push(chunkName);
                   console.log(`  - 마지막 청크 ${chunkIndex} 생성 완료.`);
              }
              console.log("모든 청크 파일 생성 완료.");

              // 4. 인덱스 파일 생성
              console.log(`4. 새로운 인덱스 파일 '${GITHUBCONFIG.indexPath}' 생성 중...`);
              await fs.writeFile(GITHUBCONFIG.indexPath, JSON.stringify(newChunkNames, null, 2));
              console.log("인덱스 파일 생성 완료.");

              // 5. 기존 파일 백업
              console.log(`5. 기존 파일 '${GITHUBCONFIG.legacyPath}'을 '${GITHUBCONFIG.legacyPath}.bak'으로 백업(이름 변경)합니다.`);
              await fs.rename(GITHUBCONFIG.legacyPath, `${GITHUBCONFIG.legacyPath}.bak`);
              
              console.log("::set-output name=migrated::true");
              console.log("마이그레이션이 성공적으로 완료되었습니다!");
            }
            run().catch(err => {
              console.error(err);
              process.exit(1);
            });
          '
      
      # 4. 변경된 파일들을 저장소에 커밋하고 푸시합니다.
      - name: Commit and push changes
        if: steps.run-script.outputs.migrated == 'true'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add data/
          git commit -m "Chore: Migrate legacy data to chunked format"
          git push

