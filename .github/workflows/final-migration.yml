name: Final Data Migration to main.json

on:
  # Actions 탭에서 수동으로 실행할 수 있도록 허용
  workflow_dispatch:

jobs:
  migrate-to-main-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 저장소에 파일을 쓰고 커밋할 수 있는 권한

    steps:
      # 1. 저장소 코드를 워크플로우 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # GitHub Actions가 생성한 커밋이 다른 워크플로우를 트리거할 수 있도록 PAT를 사용합니다.
          token: ${{ secrets.GH_PAT }}

      # 2. Node.js 환경을 설정합니다.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. 최종 마이그레이션 스크립트를 실행합니다.
      - name: Run Final Migration Script
        id: run-script
        run: |
          node -e '
            const fs = require("fs").promises;

            async function run() {
              const legacyPath = "data/results.json";
              const mainDataPath = "data/main.json";
              
              console.log("최종 마이그레이션을 시작합니다.");

              // 1. 기존 파일 읽기
              console.log(`1. 기존 파일 '${legacyPath}' 또는 '${legacyPath}.bak' 확인 중...`);
              let legacyContent;
              try {
                // Try reading .bak first, then the original
                try {
                  legacyContent = await fs.readFile(`${legacyPath}.bak`, "utf-8");
                  console.log(`'${legacyPath}.bak' 파일을 사용합니다.`);
                } catch (e) {
                  legacyContent = await fs.readFile(legacyPath, "utf-8");
                   console.log(`'${legacyPath}' 파일을 사용합니다.`);
                }
              } catch (e) {
                console.log(`기존 데이터 파일을 찾을 수 없습니다. 마이그레이션을 중단합니다.`);
                return;
              }
              console.log("기존 파일 확인 완료.");

              // 2. 데이터 파싱 및 객체로 변환
              console.log("2. 기존 데이터 파싱 중...");
              const dataToMigrate = JSON.parse(legacyContent);
              const dataAsObject = Array.isArray(dataToMigrate) 
                ? dataToMigrate.reduce((acc, item) => { if(item && item.analysisId) acc[item.analysisId] = item; return acc; }, {}) 
                : dataToMigrate;
              console.log(`파싱 완료. 총 ${Object.keys(dataAsObject).length}개 기록 발견.`);

              // 3. main.json 파일 생성
              console.log(`3. 모든 데이터를 '${mainDataPath}' 파일에 저장합니다...`);
              await fs.writeFile(mainDataPath, JSON.stringify(dataAsObject, null, 2));
              console.log(`'${mainDataPath}' 파일 생성 완료.`);
              
              // 4. 기존 파일 백업
              console.log(`4. 기존 파일 '${legacyPath}'을 '${legacyPath}.migrated.bak'으로 백업(이름 변경)합니다.`);
              try {
                 await fs.rename(legacyPath, `${legacyPath}.migrated.bak`);
              } catch(e) {
                 console.log("원본 파일이 없어 백업을 건너뜁니다 (이미 .bak 파일을 사용한 경우).");
              }
              
              console.log("::set-output name=migrated::true");
              console.log("최종 마이그레이션이 성공적으로 완료되었습니다!");
            }
            run().catch(err => {
              console.error(err);
              process.exit(1);
            });
          '
      
      # 4. 변경된 파일들을 저장소에 커밋하고 푸시합니다.
      - name: Commit and push changes
        if: steps.run-script.outputs.migrated == 'true'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add data/
          git commit -m "Chore: Final migration of legacy data to main.json"
          git push

